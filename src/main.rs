#![feature(maybe_uninit_uninit_array, layout_for_ptr)]

use libc;
use std::ffi;
use std::mem::MaybeUninit;

use std::os::raw::{c_char, c_int, c_void};

const PAGE_SIZE: u16 = 4096;

fn prepare_pipe(pipe: &mut [MaybeUninit<i32>; 2]) {
    unsafe {
        if libc::pipe(pipe[1].as_mut_ptr() as *mut i32) != 0 {
            panic!("couldn't init pipe");
        }
    }

    println!("init pipe");

    let pipe_size = unsafe { libc::fcntl(pipe[1].assume_init(), libc::F_GETPIPE_SZ) };

    let mut char_buffer: [MaybeUninit<char>; 4096] = unsafe { MaybeUninit::uninit().assume_init() };
    let mut char_buffer_len: usize = 0;

    let mut w = pipe_size;
    while w > 0 {
        let n = if w > char_buffer_len as i32 {
            char_buffer_len as i32
        } else {
            w
        };

        unsafe {
            libc::write(
                pipe[1].assume_init(),
                char_buffer.as_mut_ptr() as *const c_void,
                n.try_into().unwrap(),
            )
        };
        char_buffer_len += 1;

        w = w - n
    }

    println!("filled up the pipe");

    let mut r = pipe_size;
    while r > 0 {
        let n = if r > char_buffer_len as i32 {
            char_buffer_len as i32
        } else {
            r
        };

        unsafe {
            libc::read(
                pipe[0].assume_init(),
                char_buffer.as_mut_ptr() as *mut c_void,
                n.try_into().unwrap(),
            )
        };

        r = r - n
    }

    println!("empty the pipe");
}

fn main() {
    println!("Hello, world!");
    //let file_to_open = ffi::CString::new("test").expect("c_char conversion failed");

    //let fd = unsafe { libc::open(file_to_open.as_ptr() as *const c_char, 1) };

    let mut pipe: [MaybeUninit<i32>; 2] = MaybeUninit::uninit_array();
    prepare_pipe(&mut pipe);

    //println!("{:?}", fd);
}
